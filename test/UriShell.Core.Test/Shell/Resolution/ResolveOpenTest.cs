using System;
using System.Collections.Generic;
using System.Linq;
using FluentAssertions;

using Microsoft.Extensions.Logging;

using NSubstitute;
using UriShell.Shell.Registration;
using Xunit;

namespace UriShell.Shell.Resolution
{
    public class ResolveOpenTest
    {
        private IUriResolvedObjectHolder _uriResolvedObjectHolder = Substitute.For<IUriResolvedObjectHolder>();
        private IUriResolutionCustomization _uriResolutionCustomization = Substitute.For<IUriResolutionCustomization>();
        private IUriModuleItemResolver _uriModuleItemResolver = Substitute.For<IUriModuleItemResolver>();
        private IResolveSetupFactory _resolveSetupFactory = Substitute.For<IResolveSetupFactory>();
        private ILogger _logger = Substitute.For<ILogger>();
        private IUriDisconnectTable _uriDisconnectTable = Substitute.For<IUriDisconnectTable>();

        public ResolveOpenTest()
        {
            UriShellSettings.Initialize(b => { b.Scheme = "tst"; });

            var uriModuleResolverIndex =
                Substitute.For<IReadOnlyDictionary<UriModuleItemResolverKey, IUriModuleItemResolver>>();

            uriModuleResolverIndex
                .TryGetValue(new UriModuleItemResolverKey("module", "item"), out IUriModuleItemResolver uriModuleResolverStub)
                .Returns(
                    x =>
                    {
                        x[1] = _uriModuleItemResolver;
                        return true;
                    });

            var anyPlacementResolver = Substitute.For<IUriPlacementResolver>();
            anyPlacementResolver.Resolve(null, null, null).ReturnsForAnyArgs(Substitute.For<IUriPlacementConnector>());

            _uriResolutionCustomization.ModuleItemResolvers.Returns(uriModuleResolverIndex);
            _uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(anyPlacementResolver, 1));
        }

        private ResolveOpen CreateTestObject(Uri uri, params object[] attachments)
        {
            return new ResolveOpen(
                uri,
                attachments,
                _resolveSetupFactory,
                _uriResolvedObjectHolder,
                _uriDisconnectTable,
                _uriResolutionCustomization,
                _logger);
        }

        [Fact]
        public void ResolvesUriModuleItem()
        {
            var uriModuleResolver1 = Substitute.For<IUriModuleItemResolver>();
            var uriModuleResolver2 = Substitute.For<IUriModuleItemResolver>();
            var uriModuleResolverIndex = Substitute.For<IReadOnlyDictionary<UriModuleItemResolverKey, IUriModuleItemResolver>>();

            uriModuleResolverIndex
                .TryGetValue(new UriModuleItemResolverKey("module", "item"), out IUriModuleItemResolver uriModuleResolverStub)
                .Returns(x =>
                    {
                        x[1] = uriModuleResolver1;
                        return true;
                    });

            uriModuleResolverIndex
                .TryGetValue(new UriModuleItemResolverKey("module2", "item2"), out uriModuleResolverStub)
                .Returns(
                    x =>
                    {
                        x[1] = uriModuleResolver2;
                        return true;
                    });

            _uriResolutionCustomization.ModuleItemResolvers.Returns(uriModuleResolverIndex);

            var uri = new Uri("tst://tab/module/item");
            CreateTestObject(uri).OpenOrThrow();

            uriModuleResolver1.Received(1).Resolve(uri, Arg.Any<UriAttachmentSelector>());
            uriModuleResolver2.DidNotReceive().Resolve(uri, Arg.Any<UriAttachmentSelector>());
        }

        [Fact]
        public void ThrowsExceptionWhenDoesntResolveUriModuleItem()
        {
            var uriModuleResolverIndex = Substitute.For<IReadOnlyDictionary<UriModuleItemResolverKey, IUriModuleItemResolver>>();

            IUriModuleItemResolver uriModuleResolverStub;
            uriModuleResolverIndex
                .TryGetValue(Arg.Any<UriModuleItemResolverKey>(), out uriModuleResolverStub)
                .Returns(false);

            _uriResolutionCustomization.ModuleItemResolvers.Returns(uriModuleResolverIndex);

            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);

            resolveOpen.Invoking(ro => ro.OpenOrThrow())
                       .ShouldThrow<UriResolutionException>()
                       .Where(e => e.Uri == uri && e.Message.Contains(nameof(IUriModuleItemResolver)));
        }

        [Fact]
        public void ResolvesUriPlacementAndConnects()
        {
            var resolved = new object();

            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();

            var uriPlacementResolver1 = Substitute.For<IUriPlacementResolver>();
            uriPlacementResolver1
                .Resolve(resolved, Arg.Is<Uri>(u => new ShellUriBuilder(u).Placement == "tab"), Arg.Any<UriAttachmentSelector>())
                .Returns(uriPlacementConnector);

            var uriPlacementResolver2 = Substitute.For<IUriPlacementResolver>();
            uriPlacementResolver2
                .Resolve(resolved, Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>())
                .Returns((IUriPlacementConnector)null);

            _uriResolutionCustomization.PlacementResolvers.Returns(new[] { uriPlacementResolver2, uriPlacementResolver1 });

            var uri = new Uri("tst://tab/module/item");
            CreateTestObject(uri).OpenOrThrow();

            uriPlacementResolver1.Received(1).Resolve(resolved, uri, Arg.Any<UriAttachmentSelector>());
            uriPlacementResolver2.Received(1).Resolve(resolved, uri, Arg.Any<UriAttachmentSelector>());
            uriPlacementConnector.Received(1).Connect(resolved);
        }

        [Fact]
        public void ThrowsExceptionWhenDoesntResolveUriPlacement()
        {
            var resolved = new object();

            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var uriPlacementResolver = Substitute.For<IUriPlacementResolver>();
            uriPlacementResolver.Resolve(resolved, Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>()).Returns((IUriPlacementConnector)null);

            _uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(uriPlacementResolver, 3));

            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);

            resolveOpen.Invoking(ro => ro.OpenOrThrow())
                       .ShouldThrow<UriResolutionException>()
                       .Where(e => e.Uri == uri && e.Message.Contains(nameof(IUriPlacementResolver)));
        }

        [Fact]
        public void EmbedsAttachmentsIntoValidPlaceholders()
        {
            var attachmentsChecked = false;
            var attachment1 = new object();
            var attachment2 = new object();
            var attachment3 = new object();

            _uriModuleItemResolver
                .When(r => r.Resolve(Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>()))
                .Do(x =>
                    {
                        var uriBuilder = new ShellUriBuilder((Uri)x[0]);
                        var selector = (UriAttachmentSelector)x[1];

                        uriBuilder.Parameters.Count.Should().Be(3);

                        attachment1.Should().Be(selector(uriBuilder.Parameters["p2"]));
                        attachment2.Should().Be(selector(uriBuilder.Parameters["p1"]));
                        attachment3.Should().Be(selector(uriBuilder.Parameters["p3"]));

                        attachmentsChecked = true;
                    });

            var uri = new Uri("tst://tab/module/item?p1={1}&p2={0}&p3={2}");
            CreateTestObject(uri, attachment1, attachment2, attachment3).OpenOrThrow();

            attachmentsChecked.Should().BeTrue();
        }

        [Fact]
        public void DoesntEmbedAttachmentsIntoDoubleBraces()
        {
            var attachmentsChecked = false;
            var attachment1 = new object();
            var attachment2 = new object();
            var attachment3 = new object();

            _uriModuleItemResolver
                .When(r => r.Resolve(Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>()))
                .Do(x =>
                    {
                        var uriBuilder = new ShellUriBuilder((Uri)x[0]);
                        var selector = (UriAttachmentSelector)x[1];

                        uriBuilder.Parameters["p2"].Should().Be("{0}");
                        selector(uriBuilder.Parameters["p2"]).Should().BeNull();

                        selector(uriBuilder.Parameters["p4"]).Should().Be(attachment1);
                        selector(uriBuilder.Parameters["p1"]).Should().Be(attachment2);
                        selector(uriBuilder.Parameters["p3"]).Should().Be(attachment3);

                        attachmentsChecked = true;
                    });

            var uri = new Uri("tst://tab/module/item?p1={1}&p2={{0}}&p3={2}&p4={0}");
            CreateTestObject(uri, attachment1, attachment2, attachment3).OpenOrThrow();

            attachmentsChecked.Should().BeTrue();
        }

        [Fact]
        public void AttachmentSelectorDoesntReturnAttachmentOutOfRange()
        {
            var attachmentsChecked = false;
            var attachment = new object();

            _uriModuleItemResolver
                .When(r => r.Resolve(Arg.Any<Uri>(), Arg.Any<UriAttachmentSelector>()))
                .Do(x =>
                    {
                        var uriBuilder = new ShellUriBuilder((Uri)x[0]);
                        var selector = (UriAttachmentSelector)x[1];

                        selector(uriBuilder.Parameters["p2"]).Should().Be(attachment);
                        selector(uriBuilder.Parameters["p1"]).Should().BeNull();
                        selector(uriBuilder.Parameters["p3"]).Should().BeNull();
                        selector("someparametervalue").Should().BeNull();
                        selector(null).Should().BeNull();

                        attachmentsChecked = true;
                    });

            var uri = new Uri("tst://tab/module/item?p1={1}&p2={0}&p3={2}");
            CreateTestObject(uri, attachment).OpenOrThrow();

            attachmentsChecked.Should().BeTrue();
        }

        [Fact]
        public void LogsResolvedUri()
        {
            var resolved = new object();
            Uri resolvedUri = null;

            _uriModuleItemResolver
                .Resolve(null, null)
                .ReturnsForAnyArgs(ci =>
                {
                    resolvedUri = (Uri)ci[0];
                    return resolved;
                });

            var uri = new Uri("tst://tab/module/item?at={0}");
            CreateTestObject(uri, 1).OpenOrThrow();

            _logger.Received().Log(
                LogLevel.Information,
                Arg.Any<EventId>(),
                Arg.Is<object>(s => s.ToString().Contains(resolvedUri.ToString())),
                Arg.Any<Exception>(),
                Arg.Any<Func<object, Exception, string>>());
        }

        [Fact]
        public void AddsResolvedToUriResolvedObjectHolder()
        {
            var resolved = new object();
            Uri resolvedUri = null;

            _uriModuleItemResolver
                .Resolve(null, null)
                .ReturnsForAnyArgs(ci =>
                    {
                        resolvedUri = (Uri)ci[0];
                        return resolved;
                    });

            var uri = new Uri("tst://tab/module/item?at={0}");
            var disposable = CreateTestObject(uri, 1).OpenOrThrow();

            _uriResolvedObjectHolder.Received(1).Add(
                resolved,
                Arg.Is<UriResolvedMetadata>(m => m.Uri == resolvedUri && m.Disposable == disposable));
        }

        [Fact]
        public void DisconnectsResolvedWhenUriResolvedObjectHolderRefusedAdd()
        {
            var resolved = new object();
            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();
            var uriPlacementResolver = Substitute.For<IUriPlacementResolver>();
            uriPlacementResolver.Resolve(null, null, null).ReturnsForAnyArgs(uriPlacementConnector);

            _uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(uriPlacementResolver, 1));

            _uriResolvedObjectHolder
                .WhenForAnyArgs(h => h.Add(null, default(UriResolvedMetadata)))
                .Do(ci => { throw new Exception(); });

            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);

            try
            {
                resolveOpen.OpenOrThrow();
            }
            catch
            {
                uriPlacementConnector.Received(1).Disconnect(resolved);
                return;
            }

            throw new Exception(nameof(DisconnectsResolvedWhenUriResolvedObjectHolderRefusedAdd));
        }

        [Fact]
        public void RegistersUriPlacementConnectorInUriDisconnectTable()
        {
            var resolved = new object();
            Uri resolvedUri = null;

            _uriModuleItemResolver
                .Resolve(null, null)
                .ReturnsForAnyArgs(ci =>
                {
                    resolvedUri = (Uri)ci[0];
                    return resolved;
                });

            var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();
            var uriPlacementResolver = Substitute.For<IUriPlacementResolver>();
            uriPlacementResolver.Resolve(null, null, null).ReturnsForAnyArgs(uriPlacementConnector);

            _uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(uriPlacementResolver, 1));

            var uri = new Uri("tst://tab/module/item");
            CreateTestObject(uri).OpenOrThrow();

            _uriDisconnectTable.Received(1)[resolved] = uriPlacementConnector;
        }

        [Fact]
        public void ReturnsSetupFromFactory()
        {
            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);

            var setup = Substitute.For<IShellResolveSetup<object>>();
            _resolveSetupFactory
                .Create<object>(Arg.Is<ResolveSetupArgs>(a => a.ResolveOpen == resolveOpen))
                .Returns(setup);
            var setupFromResolve = resolveOpen.Setup<object>();

            setupFromResolve.Should().BeSameAs(setup);
        }

        [Fact]
        public void AllowsToSetSetupPlayerOnlyOnce()
        {
            var resolved = new object();

            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            Action<ResolveSetupPlayer> playerSender = null;
            _resolveSetupFactory
                .Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
                .ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

            var uri = new Uri("tst://tab/module/item");
            CreateTestObject(uri).Setup<object>();

            var player1 = new ResolveSetupPlayer((pUri, pResolved, pLogger, pDisposable) => { });
            var player2 = new ResolveSetupPlayer((pUri, pResolved, pLogger, pDisposable) => { });

            playerSender(player1);

            Action secondPlay = () => playerSender(player2);

            secondPlay.ShouldThrow<InvalidOperationException>()
                      .And.Message.Should().Contain(uri.ToString());
        }

        [Fact]
        public void PlaysSetupWithResolved()
        {
            var resolved = new object();

            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            Action<ResolveSetupPlayer> playerSender = null;
            _resolveSetupFactory
                .Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
                .ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);

            resolveOpen.Setup<object>();

            Uri playerUri = null;
            object playerResolved = null;
            ILogger playerLogger = null;

            playerSender(
                (pUri, pResolved, pLogger, pDisposable) =>
                {
                    playerUri = pUri;
                    playerResolved = pResolved;
                    playerLogger = pLogger;
                });

            resolveOpen.OpenOrThrow();

            playerUri.Should().Be(uri);
            playerResolved.Should().Be(resolved);
            playerLogger.Should().Be(_logger);
        }

        [Fact]
        public void PlaysSetupAfterAddingResolvedToUriResolvedObjectHolder()
        {
            var resolved = new object();

            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            Action<ResolveSetupPlayer> playerSender = null;
            _resolveSetupFactory
                .Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
                .ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);

            resolveOpen.Setup<object>();

            var playCount = 0;
            playerSender(
                (pUri, pResolved, pLogger, pDisposable) =>
                {
                    _uriResolvedObjectHolder.Received().Add(pResolved, Arg.Any<UriResolvedMetadata>());
                    playCount++;
                });

            resolveOpen.OpenOrThrow();

            playCount.Should().Be(1);
        }

        [Fact]
        public void LogsExceptionWhenSetupPlayedWithException()
        {
            var resolved = new object();

            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            Action<ResolveSetupPlayer> playerSender = null;
            _resolveSetupFactory
                .Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
                .ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);

            resolveOpen.Setup<object>();

            var exception = new InvalidOperationException(resolved.GetHashCode().ToString());
            playerSender((pUri, pResolved, pLogger, pDisposable) => { throw exception; });

            resolveOpen.OpenOrThrow();

            _logger.Received().Log(
                LogLevel.Error,
                Arg.Any<EventId>(),
                Arg.Any<object>(),
                exception,
                Arg.Any<Func<object, Exception, string>>());
        }

        [Fact]
        public void DisposesSetupPlayerResult()
        {
            var resolved = Substitute.For<IDisposable>();
            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();

            Action<ResolveSetupPlayer> playerSender = null;
            _resolveSetupFactory
                .Create<object>(Arg.Do<ResolveSetupArgs>(a => playerSender = a.PlayerSender))
                .ReturnsForAnyArgs(Substitute.For<IShellResolveSetup<object>>());

            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);

            resolveOpen.Setup<object>();

            var disposeCount = 0;
			playerSender((pUri, pResolved, pLogger, pDisposable) => 
            {
                pDisposable.Append(() =>
                {
                    resolved.DidNotReceive().Dispose();
                    uriPlacementConnector.DidNotReceive().Disconnect(resolved);
                    _uriResolvedObjectHolder.DidNotReceive().Remove(resolved);

                    disposeCount++;
                });
            });

            var openDisposable = resolveOpen.OpenOrThrow();

            _uriDisconnectTable[resolved].Returns(uriPlacementConnector);
            openDisposable.Dispose();

            disposeCount.Should().Be(1);
        }

        [Fact]
        public void DisconnectsFromUriPlacementUsingUriDisconnectTable()
        {
            var resolved = Substitute.For<IDisposable>();
            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var uri = new Uri("tst://tab/module/item");
            var disposable = CreateTestObject(uri).OpenOrThrow();

            var disconnectCount = 0;
            var disconnectPlacementConnector = Substitute.For<IUriPlacementConnector>();

            disconnectPlacementConnector
                .When(p => p.Disconnect(resolved))
                .Do(_ =>
                {
                    resolved.DidNotReceive().Dispose();
                    _uriResolvedObjectHolder.DidNotReceive().Remove(resolved);

                    disconnectCount++;
                });

            _uriDisconnectTable[resolved].Returns(disconnectPlacementConnector);

            disposable.Dispose();

            disconnectCount.Should().Be(1);
        }

        [Fact]
        public void RemovesResolvedFromUriDisconnectTable()
        {
            var resolved = Substitute.For<IDisposable>();
            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var removeCount = 0;
            _uriDisconnectTable
                .When(_ => _.Remove(resolved))
                .Do(_ =>
                {
                    resolved.Received().Dispose();
                    removeCount++;
                });

            var uri = new Uri("tst://tab/module/item");
            CreateTestObject(uri).OpenOrThrow().Dispose();

            removeCount.Should().Be(1);
        }

        [Fact]
        public void RemovesResolvedFromUriResolvedObjectHolder()
        {
            var resolved = Substitute.For<IDisposable>();
            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var removeCount = 0;
            _uriResolvedObjectHolder
                .When(_ => _.Remove(resolved))
                .Do(_ =>
                {
                    resolved.Received().Dispose();
                    removeCount++;
                });

            var uri = new Uri("tst://tab/module/item");
            CreateTestObject(uri).OpenOrThrow().Dispose();

            removeCount.Should().Be(1);
        }

        [Fact]
        public void DisposesDisposableResolved()
        {
            var resolved = Substitute.For<IDisposable>();
            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var uri = new Uri("tst://tab/module/item");
            CreateTestObject(uri).OpenOrThrow().Dispose();

            resolved.Received(1).Dispose();
        }

        [Fact]
        public void LogsExceptionWhenOpenDisposeCausedException()
        {
            var resolved = new object();
            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var exception = new Exception(resolved.GetHashCode().ToString());
            _uriResolvedObjectHolder
                .WhenForAnyArgs(h => h.Remove(null))
                .Do(_ => { throw exception; });

            var uri = new Uri("tst://tab/module/item");
            CreateTestObject(uri).OpenOrThrow().Dispose();

            _logger.Received().Log(
                LogLevel.Error,
                Arg.Any<EventId>(),
                Arg.Any<object>(),
                exception,
                Arg.Any<Func<object, Exception, string>>());
        }

        [Fact]
        public void RefreshesIRefreshableResolved()
        {
            var resolved = Substitute.For<IRefreshable>();
            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);
            resolveOpen.OpenOrThrow();

            resolved.Received(1).Refresh();
        }

        [Fact]
        public void DoesntRefreshIRefreshableResolvedWhenUriPlacementConnectorIsResponsibleForRefresh()
        {
            var resolved = Substitute.For<IRefreshable>();
            _uriModuleItemResolver.Resolve(null, null).ReturnsForAnyArgs(resolved);

            var uriPlacementConnector = Substitute.For<IUriPlacementConnector>();
            uriPlacementConnector.IsResponsibleForRefresh.Returns(true);

            var uriPlacementResolver = Substitute.For<IUriPlacementResolver>();
            uriPlacementResolver.Resolve(null, null, null).ReturnsForAnyArgs(uriPlacementConnector);

            _uriResolutionCustomization.PlacementResolvers.Returns(Enumerable.Repeat(uriPlacementResolver, 1));

            var uri = new Uri("tst://tab/module/item");
            var resolveOpen = CreateTestObject(uri);
            resolveOpen.OpenOrThrow();

            resolved.DidNotReceive().Refresh();
        }
    }
}